#!/bin/bash

set -eu

function start_service {

	service=$1
	if ! systemctl is-active --quiet "$service"
	then
		sudo systemctl start "$service"
	fi
}

for service in php-fpm blackfire-agent nginx redis
do
	start_service "$service"
done

# Default values.
{
	workspace="$(realpath "$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)/../..")"
	instancesPath="$workspace/instances"
	initialConfig=''

	function occ {
		php occ "$@"
	}
}


# Parse arguments.
{
	export instance="${1:-}"
	targetVersion="${2:-$instance}"

	if [ "$instance" == "" ]
	then
		mapfile -t instances < <(find "$instancesPath" -maxdepth 4 -name config.php)

		if [ "${#instances[@]}" == "0" ]
		then
			echo "No instance found, exiting."
			exit 0
		fi

		echo -e " \033[1m- Found ${#instances[@]} instances, which one do you want to reset ?\033[0m "

		for i in "${!instances[@]}"
		do
			instanceName=$(basename "$(dirname "$(dirname "${instances[$i]}")")")
			echo "    - $instanceName"
		done

		read -rp "> " instance
	fi

	instancePath="$instancesPath/$instance"
	instanceID="nextcloud_$instance"
	instanceDomain="nextcloud-$instance.test"

	if [ "$targetVersion" == "" ]
	then
		echo -e " \033[1m- Which version do you want to install ? (Ex: stable20, master, ...)\033[0m"

		mapfile -t versions < <(git branch | grep stable)

		echo "    - master"
		if [ "${#versions[@]}" != "0" ]
		then
			for i in "${!versions[@]}"
			do
				echo "    - ${versions[$i]}"
			done
		fi

		read -rp "> " targetVersion
	fi
}


# Parse options.
{
	TEMP=$(getopt --longoptions 's3,checkout:,fetch,database:,ldap,saml,encryption,extra-app:,repository:,update-only,offline,test,help' --name argError --options 'bc:fd:lseha:r:uot' -- "$@")
	eval set -- "$TEMP"
	unset TEMP
	while true; do
		case "$1" in
			'-c'|'--checkout')
				checkoutTo=$2
				shift 2
				continue
			;;
			'-b'|'--bucket')
				enableS3Bucket=true
				shift
				continue
			;;
			'-f'|'--fetch')
				fetchRepo=true
				shift
				continue
			;;
			'-l'|'--ldap')
				enableLdap=true
				shift
				continue
			;;
			'-s'|'--saml')
				enableSaml=true
				shift
				continue
			;;
			'-e'|'--encryption')
				enableEncryption=true
				shift
				continue
			;;
			'-d'|'--database')
				database=$2
				shift 2
				continue
			;;
			'-a'|'--extra-app')
				APP_LIST_EXTRA+=("$2")
				shift 2
				continue
			;;
			'-u'|'--update-only')
				updateOnly=true
				shift
				continue
			;;
			'-r'|'--repository')
				repository+=("$2")
				shift 2
				continue
			;;
			'-o'|'--offline')
				offline=true
				shift
				continue
			;;
			'-t'|'--test')
				test=true
				shift
				continue
			;;
			'-h'|'--help')
				help_string=""
				help_string+='nc_reset_instance <instance-name (folder name)> [<branch-name>]'$'\n'
				help_string+='	-c --checkout | Checkout the given branch or tag for server.'$'\n'
				help_string+='	-b --bucket | Enable S3 bucket.'$'\n'
				help_string+='	-f --fetch | Fetch repositories before checkout the branch.'$'\n'
				help_string+='	-d --database <mysql,pgsql,sqlite> | Set the database to use. Default: mysql.'$'\n'
				help_string+='	-l --ldap | Enable ldap.'$'\n'
				help_string+='	-e --encryption | Enable encryption.'$'\n'
				help_string+='	-a --extra-app <app-name> | Enable given application. Can be submitted multiple times.'$'\n'
				help_string+='	-r --repository <app-name> | Nextcloud repository to clone.'$'\n'
				help_string+='	-u --update-only | Do not touch user data.'$'\n'
				help_string+='	-o --offline | Do not make remote git operations.'$'\n'
				help_string+='	-t --test | Prep the instance for tests only.'$'\n'
				help_string+='	-h --help | Display this help message.'$'\n'
				echo "$help_string" | column -t -s "|"
				exit 0
			;;
			'--')
				break
			;;
			*)
				echo "Extra arg: $1"
				shift 2
				continue
			;;
		esac
	done
}


# App lists.
{
	APP_LIST_SHIPPED=()
	APP_LIST_SHIPPED+=(activity)
	APP_LIST_SHIPPED+=(files_pdfviewer)
	# APP_LIST_SHIPPED+=(files_rightclick) NOT NEEDED ANYMORE
	# APP_LIST_SHIPPED+=(files_videoplayer) DEPRECATED
	APP_LIST_SHIPPED+=(firstrunwizard)
	APP_LIST_SHIPPED+=(logreader)
	APP_LIST_SHIPPED+=(nextcloud_announcements)
	APP_LIST_SHIPPED+=(notifications)
	APP_LIST_SHIPPED+=(password_policy)
	APP_LIST_SHIPPED+=(photos)
	APP_LIST_SHIPPED+=(privacy)
	APP_LIST_SHIPPED+=(recommendations)
	APP_LIST_SHIPPED+=(serverinfo)
	APP_LIST_SHIPPED+=(survey_client)
	APP_LIST_SHIPPED+=(text)
	APP_LIST_SHIPPED+=(viewer)
	APP_LIST_SHIPPED+=(bruteforcesettings)

	APP_LIST_SHIPPED_ENTERPRISE=()
	APP_LIST_SHIPPED_ENTERPRISE+=(support)
	APP_LIST_SHIPPED_ENTERPRISE+=(security_guard)

	APP_LIST_DEV=()
	APP_LIST_DEV+=(hmr_enabler)
	APP_LIST_DEV+=(profiler)
	APP_LIST_DEV+=(previewgenerator)
	APP_LIST_DEV+=(ocs_api_viewer)

	APP_LIST_SUPPORTED=()
	# Files subscription
	APP_LIST_SUPPORTED+=(globalsiteselector)
	APP_LIST_SUPPORTED+=(bruteforcesettings)
	APP_LIST_SUPPORTED+=(circles)
	APP_LIST_SUPPORTED+=(data_request)
	APP_LIST_SUPPORTED+=(external)
	APP_LIST_SUPPORTED+=(files_accesscontrol)
	APP_LIST_SUPPORTED+=(files_antivirus)
	APP_LIST_SUPPORTED+=(files_automatedtagging)
	APP_LIST_SUPPORTED+=(files_fulltextsearch)
	APP_LIST_SUPPORTED+=(files_fulltextsearch_tesseract)
	APP_LIST_SUPPORTED+=(files_retention)
	APP_LIST_SUPPORTED+=(flow_notifications)
	APP_LIST_SUPPORTED+=(fulltextsearch)
	APP_LIST_SUPPORTED+=(fulltextsearch_elasticsearch)
	APP_LIST_SUPPORTED+=(groupfolders)
	APP_LIST_SUPPORTED+=(guests)
	APP_LIST_SUPPORTED+=(sharepoint)
	APP_LIST_SUPPORTED+=(socialsharing_diaspora)
	APP_LIST_SUPPORTED+=(socialsharing_email)
	APP_LIST_SUPPORTED+=(socialsharing_facebook)
	APP_LIST_SUPPORTED+=(socialsharing_twitter)
	APP_LIST_SUPPORTED+=(suspicious_login)
	APP_LIST_SUPPORTED+=(terms_of_service)
	APP_LIST_SUPPORTED+=(twofactor_totp)
	APP_LIST_SUPPORTED+=(twofactor_u2f)
	APP_LIST_SUPPORTED+=(user_oidc)
	APP_LIST_SUPPORTED+=(user_saml)
	APP_LIST_SUPPORTED+=(workflow_script)
	# Groupware subscription
	APP_LIST_SUPPORTED+=(calendar)
	APP_LIST_SUPPORTED+=(contacts)
	APP_LIST_SUPPORTED+=(deck)
	APP_LIST_SUPPORTED+=(mail)
	# Dedicated subscriptions
	APP_LIST_SUPPORTED+=(spreed)
	APP_LIST_SUPPORTED+=(richdocuments)
	APP_LIST_SUPPORTED+=(onlyoffice)
	APP_LIST_SUPPORTED+=(hancomoffice)
	APP_LIST_SUPPORTED+=(OfficeOnline)
	# Other apps we market or sold individually to single customers
	APP_LIST_SUPPORTED+=(app-tutorial)
	APP_LIST_SUPPORTED+=(apswhisperer) # AMX
	APP_LIST_SUPPORTED+=(end_to_end_encryption) # Magentacloud
	APP_LIST_SUPPORTED+=(forms) # Marketing NC19
	APP_LIST_SUPPORTED+=(groupquota) # Manz Solutions GmbH
	APP_LIST_SUPPORTED+=(impersonate) # ownCloud Checkbox
	# APP_LIST_SUPPORTED+=(integration_*)
	APP_LIST_SUPPORTED+=(ldap_contacts_backend) # Uni Nantes
	APP_LIST_SUPPORTED+=(ldap_write_support) # Wurth
	APP_LIST_SUPPORTED+=(notify_push)
	APP_LIST_SUPPORTED+=(registration) # MCIT
	APP_LIST_SUPPORTED+=(social) # Marketing NC15
	APP_LIST_SUPPORTED+=(survey_server) # Nextcloud GmbH - Usage statistics
	APP_LIST_SUPPORTED+=(talk_matterbridge) # Marketing NC20
	APP_LIST_SUPPORTED+=(user_retention) # TUV Rheinland
	APP_LIST_SUPPORTED+=(user_usage_report) # AMX
	APP_LIST_SUPPORTED+=(workflow_pdf_converter) # Marketing of flows
	APP_LIST_SUPPORTED+=(twofactor_admin) # Landschaftverband Westfalen-Lippe
}


# TLS certificates.
{
	livePath="/etc/letsencrypt/live"
	certPath="$livePath/$instanceDomain"

	# Prevent overriding existing root CA.
	if [ ! -f "$livePath/chain.pem" ]
	then
		echo -e " \033[1m- Generating root CA.\033[0m"

		# Write root CA configuration file.
		echo "[ req ]
		prompt             = no
		string_mask        = default
		default_bits       = 2048
		distinguished_name = req_distinguished_name
		x509_extensions    = x509_ext
		[ req_distinguished_name ]
		organizationName = $HOSTNAME
		commonName = Local Root CA
		[ x509_ext ]
		basicConstraints=critical,CA:true,pathlen:0
		keyUsage=critical,keyCertSign,cRLSign" | sudo tee "$livePath/local_root_ca.conf" 1> /dev/null

		# Creating root CA.
		sudo openssl req \
			-days 3650 \
			-nodes \
			-x509 \
			-new \
			-keyout "$livePath/local_root.key" \
			-out "$livePath/chain.pem" \
			-config "$livePath/local_root_ca.conf"

		echo "You can install the following CA in your browser to ease development: $livePath/chain.pem"

	fi

	if [ ! -d "$certPath" ]
	then
		echo -e " \033[1m- Generating certificates for instance $instance.\033[0m"

		sudo mkdir -p "$certPath"

		# Write certificates configuration file.
		echo "[ req ]
		prompt             = no
		string_mask        = default
		default_bits       = 2048
		distinguished_name = req_distinguished_name
		x509_extensions    = x509_ext
		[ req_distinguished_name ]
		organizationName = Nextcloud local
		commonName = $instanceDomain
		[ x509_ext ]
		keyUsage=critical,digitalSignature,keyAgreement
		subjectAltName = @alt_names
		[alt_names]
		DNS.1 = $instanceDomain" | sudo tee "$certPath/server_cert.conf" 1> /dev/null

		# Generating TLS certificate.
		sudo openssl req \
			-nodes \
			-new \
			-keyout "$certPath/privkey.pem" \
			-out "$certPath/server.csr" \
			-config "$certPath/server_cert.conf"

		# Signing certificate with root CA.
		sudo openssl x509 \
			-days 3650 \
			-req \
			-in "$certPath/server.csr" \
			-CA "$livePath/chain.pem" \
			-CAkey "$livePath/local_root.key" \
			-set_serial "$RANDOM" \
			-out "$certPath/fullchain.pem" \
			-extfile "$certPath/server_cert.conf" \
			-extensions x509_ext

		echo "PLEASE APPEND /etc/pki/tls/certs/ca-bundle.crt WITH '$livePath/chain.pem'"
		# sudo su
		# echo "# Local CA by artonge 19/10/2023" >> /etc/pki/tls/certs/ca-bundle.crt
		# cat /etc/letsencrypt/live/chain.pem >> /etc/pki/tls/certs/ca-bundle.crt
	fi
}


# Nginx
{
	if [ ! -f "/etc/nginx/conf.d/$instanceDomain.conf" ]
	then
		echo -e " \033[1m- Setting up Nginx.\033[0m"
		envsubst "\$instance" < $workspace/engineering/nextcloud.test.conf.template | sudo tee "/etc/nginx/conf.d/$instanceDomain.conf" 1> /dev/null
		sudo systemctl restart nginx
	fi
}


# /etc/hosts
{
	if ! grep "$instanceDomain" /etc/hosts 1> /dev/null
	then
		echo -e " \033[1m- Setting up /etc/hosts.\033[0m"
		echo "127.0.0.1	$instanceDomain" | sudo tee --append /etc/hosts 1> /dev/null
	fi
}


echo -e " \033[1m- Setting up files for instance $instance on $targetVersion.\033[0m"
{
	if [ ! -e "$instancePath" ]
	then
		git -C "$instancesPath/server1" worktree add "$instancePath" "$targetVersion"
	fi

	if [ "${updateOnly:-false}" = "false" ]
	then
		echo -e "	- Deleting data and configuration."
		rm -rf "$instancePath"/data/*
		rm -rf "$instancePath"/config/config.php
	fi

	if [[ "${fetchRepo:-false}" == "true" && "${offline:-false}" == "false" ]]
	then
		git -C "$instancePath" fetch --force --tags --prune --prune-tags --recurse-submodules --quiet
	fi

	git -C "$instancePath" checkout --quiet .htaccess

	if [ "${checkoutTo:-}" != "" ]
	then
		echo -e "	- Checking out $checkoutTo."
		git -C "$instancePath" checkout --quiet --recurse-submodules "$checkoutTo"
	else
		echo -e "	- Checking out $targetVersion."
		git -C "$instancePath" checkout --quiet --recurse-submodules "$targetVersion"
	fi

	mkdir --parent "$instancePath/apps-extra"

	# Asynchronously pull new changes for server.
	if [ "${offline:-false}" == "false" ]
	then
		{
			# Do not pull if we are on a tag
			if ! git -C "$instancePath" describe --exact-match --tags HEAD >/dev/null 2>&1;
			then
				git -C "$instancePath" pull --quiet
			fi
			git -C "$instancePath" submodule --quiet update --init
 		} &
	fi
}

echo -e " \033[1m- Setting up apps.\033[0m"
{
	initialConfig="$initialConfig\
		'apps_paths' => [\
			[\
					'path'=> '$instancePath/apps',\
					'url' => '/apps',\
					'writable' => false,\
			],\
			[\
					'path'=> '$instancePath/apps-extra',\
					'url' => '/apps-extra',\
					'writable' => true,\
			],
		],"

	function parse_git_branch() {
		repo="$1"
		branch=$(git -C "$repo" branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
		if [ ! "${branch}" == "" ]
		then
			echo "${branch}$(parse_git_dirty "$repo")"
		else
			echo ""
		fi
	}

	# get current status of git repo
	function parse_git_dirty {
		repo="$1"
		status=$(git -C "$repo" status 2>&1 | tee)
		dirty=$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
		untracked=$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
		ahead=$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
		newFile=$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
		renamed=$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
		deleted=$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
		bits=''
		if [ "${renamed}" == "0" ]; then
			bits=">${bits}"
		fi
		if [ "${ahead}" == "0" ]; then
			bits="*${bits}"
		fi
		if [ "${newFile}" == "0" ]; then
			bits="+${bits}"
		fi
		if [ "${untracked}" == "0" ]; then
			bits="?${bits}"
		fi
		if [ "${deleted}" == "0" ]; then
			bits="x${bits}"
		fi
		if [ "${dirty}" == "0" ]; then
			bits="!${bits}"
		fi
		if [ ! "${bits}" == "" ]; then
			echo " ${bits}"
		else
			echo ""
		fi
	}

	function setup_app() {
		app="$1"
		clone_url="$2"
		version="${3:-$targetVersion}"
		appPath="$instancePath/apps-extra/$app"

		if [[ "${test:-false}" == "true" ]]
		then
			echo "	- Skipping setup $app"
			return
		fi

		if [ ! -e "$appPath" ]
		then
			if [ ! -e "$workspace/apps/$app" ]
			then
				git clone --quiet "$clone_url" "$workspace/apps/$app" > /dev/null
			fi

			mainBranch="$(git -C "$workspace/apps/$app" rev-parse --verify --quiet --abbrev-ref origin/HEAD --)"
			mainBranch="${mainBranch#origin/}"

			git -C "$workspace/apps/$app" fetch --force --tags --prune --prune-tags --recurse-submodules --quiet

			git -C "$workspace/apps/$app" worktree add --quiet --force "$appPath" "$version" ||
			git -C "$workspace/apps/$app" worktree add --quiet --force "$appPath" "$mainBranch" ||
			git -C "$workspace/apps/$app" worktree add --quiet --force "$appPath" "master"
		fi

		if [ ! -e "$appPath/.git" ]
		then
			echo -e "\033[1;31mWARNING - this is not a proper git repository !!! $appPath\033[0m"
			return
		fi

		# Asynchronously pull new changes for the app.
		if [ "${offline:-false}" == "false" ]
		then
			if [ "$(parse_git_dirty "$appPath")" != "" ]
			then
				git -C "$appPath" status --short
				echo -e "\033[1;32mDo you want to clean the $app repository ? [y/n]\033[0m"
				read -rp "" clean

				if [ "${clean}" == "y" ]
				then
					git -C "$appPath" add .
					git -C "$appPath" reset --hard
				fi
			fi

			if [ "$(parse_git_dirty "$appPath")" == "" ]
			then
				if [ "${fetchRepo:-false}" == "true" ]
				then
					git -C "$appPath" fetch --force --tags --prune --prune-tags --recurse-submodules --quiet || echo -e "\033[1;31mFailed to fetch $app\033[0m"
				fi

				mainRemoteAndBranch="$(git -C "$appPath" rev-parse --verify --quiet --abbrev-ref origin/HEAD --)"
				mainBranch="${mainRemoteAndBranch#origin/}"

				currentBranch=$(git -C "$appPath" rev-parse --abbrev-ref HEAD)
				if [ "$version" == 'master' ]
				then
					checkoutVersion="$mainBranch"
				else
					checkoutVersion="$version"
				fi

				if [ "$currentBranch" != "$checkoutVersion" ]
				then
					git -C "$appPath" checkout --quiet --force "$checkoutVersion" || echo -e "\033[1;31mFailed to checkout $checkoutVersion for $app\033[0m"
				fi

				currentBranch=$(git -C "$appPath" rev-parse --abbrev-ref HEAD)
				if [ "$currentBranch" != "$checkoutVersion" ] && [ "$currentBranch" != "$mainBranch" ] && [ "$mainBranch" != "$checkoutVersion" ]
				then
					git -C "$appPath" checkout --quiet --force "$mainBranch" || echo -e "\033[1;31mFailed to checkout $mainBranch for $app\033[0m"
				fi

				currentBranch=$(git -C "$appPath" rev-parse --abbrev-ref HEAD)
				if [ "$currentBranch" != "$checkoutVersion" ] && [ "$currentBranch" != "$mainBranch" ] && [ "$currentBranch" != "master" ] && [ "master" != "$mainBranch" ] && [ "master" != "$checkoutVersion" ]
				then
					git -C "$appPath" checkout --quiet --force "master" || echo -e "\033[1;31mFailed to checkout 'master for $app\033[0m"
				fi

				if [ "${fetchRepo:-false}" == "true" ]
				then
					git -C "$appPath" pull --quiet 2> /dev/null || (echo -e "\033[1;31mFailed to pull $app\033[0m"; git -C "$appPath" status)
				fi
			fi

			echo "	- $app ($(parse_git_branch "$appPath"))"
			composer --quiet --working-dir "$appPath" install
		else
			echo "	- $app ($(parse_git_branch "$appPath"))"
			composer dumpautoload --quiet --working-dir "$appPath"
		fi
	}

	for app in "${APP_LIST_SHIPPED[@]}"
	do
		setup_app "$app" "git@github.com:nextcloud/$app.git"
	done

	for app in "${APP_LIST_SHIPPED_ENTERPRISE[@]}"
	do
		setup_app "$app" "git@github.com:nextcloud-gmbh/$app.git"
	done

	for app in "${APP_LIST_DEV[@]}"
	do
		setup_app "$app" "git@github.com:nextcloud/$app.git" master
	done

	for app in "${APP_LIST_EXTRA[@]}"
	do
		setup_app "$app" "git@github.com:nextcloud/$app.git"
	done

	wait
}

cd "$instancePath"

# Early exit if update only.
{
	if [ "${updateOnly:-false}" = "true" ]
	then
		occ upgrade
		echo -e " \033[1m- Early exit due to --update-only flag.\033[0m"
		exit 0
	fi
}

echo -e " \033[1m- Recreating ${database:-mysql} database.\033[0m"
{
	if [ "${database:-mysql}" == "mysql" ]
	then
		start_service mariadb
		dbPort=3306
		mysql <<-EOSQL
			DROP DATABASE IF EXISTS $instanceID;
			CREATE DATABASE $instanceID;

			CREATE USER IF NOT EXISTS nextcloud IDENTIFIED BY 'password';
			GRANT ALL PRIVILEGES ON $instanceID.* TO nextcloud identified by 'password';
		EOSQL
	elif [ "${database:-mysql}" == "pgsql" ]
	then
		start_service postgresql
		dbPort=5432
		psql -d postgres -v ON_ERROR_STOP=1 <<-EOSQL
			-- CREATE USER $instanceID WITH ENCRYPTED PASSWORD 'password';

			DROP DATABASE IF EXISTS $instanceID;
			CREATE DATABASE $instanceID WITH OWNER nextcloud;
		EOSQL
	elif [ "${database:-mysql}" == "sqlite" ]
	then
		dbPort=0
		rm -f "$instancePath/db.sqlite"
	else
		echo "Database must be 'mysql', 'pgsql' or 'sqlite'"
		exit 1
	fi
}

# Setup S3 Primary storage
{
	if [ "${enableS3Bucket:-false}" == "true" ]
	then
		echo -e " \033[1m- Setting up S3 bucket.\033[0m"
		sseCKey=""
		certPath="/etc/letsencrypt/live/nextcloud_minio"

		if [ ! -d "$certPath" ]
		then
			echo -e " \033[1m- Generating certificates for minio.\033[0m"

			sudo mkdir -p "$certPath"

			# Write certificates configuration file.
			echo "[ req ]
			prompt             = no
			string_mask        = default
			default_bits       = 2048
			distinguished_name = req_distinguished_name
			x509_extensions    = x509_ext
			[ req_distinguished_name ]
			organizationName = Nextcloud local
			commonName = localhost
			[ x509_ext ]
			keyUsage=critical,digitalSignature,keyAgreement
			subjectAltName = @alt_names
			[alt_names]
			DNS.1 = localhost
			DNS.2 = minio.test" | sudo tee "$certPath/server_cert.conf" 1> /dev/null

			# Generate TLS certificate.
			sudo openssl req \
				-nodes \
				-new \
				-keyout "$certPath/private.key" \
				-out "$certPath/server.csr" \
				-config "$certPath/server_cert.conf"

			# Sign certificate with root CA.
			sudo openssl x509 \
				-days 3650 \
				-req \
				-in "$certPath/server.csr" \
				-CA "$livePath/chain.pem" \
				-CAkey "$livePath/local_root.key" \
				-set_serial "$RANDOM" \
				-out "$certPath/public.crt" \
				-extfile "$certPath/server_cert.conf" \
				-extensions x509_ext

			cp "$livePath/chain.pem" "$certPath/CAs"
		fi

		if ! grep "minio.test" /etc/hosts 1> /dev/null
		then
			echo -e " \033[1m- Setting up /etc/hosts.\033[0m"
			echo "127.0.0.1	minio.test" | sudo tee --append /etc/hosts 1> /dev/null
		fi

		start_service podman

		if [ "${offline:-false}" == "false" ]
		then
			docker pull --quiet bitnami/minio
		fi

		if docker ps -a | grep minio 1> /dev/null
		then
			if docker ps -a | grep minio | grep -E '(Exited|Created)' 1> /dev/null
			then
				docker start minio
			else
				echo Minio already started
			fi
		else
			docker run \
				--detach \
				--name "minio" \
				-p "9100":"9000" \
				-p "9101":"9001" \
				--hostname minio.test \
				--env MINIO_ROOT_USER="nextcloud" \
				--env MINIO_ROOT_PASSWORD="nextcloud" \
				--env MINIO_BROWSER_REDIRECT_URL="http://minio.test:9101" \
				--env MINIO_SCHEME="http" \
				--env MINIO_HTTP_TRACE="/dev/stdout" \
				--env BITNAMI_DEBUG="yes" \
				bitnami/minio
				# --volume "$certPath":/certs \
		fi
		echo -e " \033[1m- Minio is available at: http://minio.test:9101.\033[0m"

		# if [ "${enableEncryption:-false}" == "true" ]
		# then
		# 	sseCKey="'sse_c_key' => ''"
		# fi

		initialConfig="$initialConfig\
			'objectstore' => [\
				'class' => 'OC\Files\ObjectStore\S3',\
				'arguments' => [\
					'bucket' => '$instanceDomain',\
					'autocreate' => true,\
					'key' => 'nextcloud',\
					'secret' => 'nextcloud',\
					'hostname' => 'minio.test',\
					'port' => 9100,\
					'use_path_style' => true,\
					'verify_bucket_exists' => true,\
					'use_ssl' => false,\
					$sseCKey\
				]\
			],"
	fi
}

echo -e " \033[1m- Set initial config.php.\033[0m"
{
	echo "<?php \$CONFIG=[$initialConfig];" > config/config.php
}

echo -e " \033[1m- Calling installation command.\033[0m"
{
	occ maintenance:install \
		--no-interaction \
		--ansi \
		--admin-user=admin \
		--admin-pass=password \
		--admin-email=louis@chmn.me \
		--database="${database:-mysql}" \
		--database-port="$dbPort" \
		--database-host=localhost \
		--database-name="$instanceID" \
		--database-user="nextcloud" \
		--database-pass=password

	echo -e " \033[1m- Enabling dev and extra apps.\033[0m"
	occ app:enable --quiet --force "${APP_LIST_DEV[@]}" "${APP_LIST_EXTRA[@]}" "${APP_LIST_SHIPPED_ENTERPRISE[@]}" || true
	for app in "${APP_LIST_DEV[@]}" "${APP_LIST_EXTRA[@]}" "${APP_LIST_SHIPPED_ENTERPRISE[@]}"
	do
		echo "	- $app"
	done

	{
		echo -e " \033[1m- Prevent Nextcloud from changing nextcloud.log's permissions.\033[0m"
		occ --quiet config:system:set check_data_directory_permissions --value false --type boolean

		echo -e " \033[1m- Disable bruteforce protection.\033[0m"
		occ --quiet config:system:set auth.bruteforce.protection.enabled --value false --type boolean

		echo -e " \033[1m- Setting trusted domains to $instanceDomain.\033[0m"
		occ --quiet config:system:set trusted_domains 0 --value "$instanceDomain"

		echo -e " \033[1m- Setting overwrite.cli.url to $instanceDomain.\033[0m"
		occ --quiet config:system:set overwrite.cli.url --value "https://$instanceDomain"

		echo -e " \033[1m- Setting local TLS certificates as trusted.\033[0m"
		occ --quiet config:system:set allow_local_remote_servers --type boolean --value true
		occ security:certificates:import "/etc/letsencrypt/live/chain.pem"

		echo -e " \033[1m- Setting up Redis.\033[0m"
		occ --quiet config:system:set memcache.local --value '\OC\Memcache\Redis'
		occ --quiet config:system:set memcache.locking --value '\OC\Memcache\Redis'

		echo -e " \033[1m- Setting up AJAX cron.\033[0m"
		occ --quiet background:ajax
		occ --quiet config:system:set maintenance_window_start --type=integer --value=1

		echo -e " \033[1m- Setting up default app to 'files'.\033[0m"
		occ --quiet config:system:set defaultapp --value files

		echo -e " \033[1m- Setting up instance name to '${checkoutTo:-$targetVersion}'.\033[0m"
		occ --quiet config:app:set theming name --value "${checkoutTo:-$targetVersion}"
	}
	{
		if [ "${enableLdap:-false}" == "true" ]
		then
			echo -e " \033[1m- Setting up LDAP.\033[0m"
			start_service slapd
			occ --quiet app:enable user_ldap
			occ --quiet ldap:create-empty-config
			occ --quiet ldap:set-config s01 ldapHost localhost &
			occ --quiet ldap:set-config s01 ldapPort 389 &
			occ --quiet ldap:set-config s01 ldapAgentName "cn=admin,dc=example,dc=com" &
			occ --quiet ldap:set-config s01 ldapAgentPassword "password" &
			occ --quiet ldap:set-config s01 ldapBase "ou=users,dc=example,dc=com" &
			occ --quiet ldap:set-config s01 ldapBaseUsers "ou=users,dc=example,dc=com" &
			occ --quiet ldap:set-config s01 ldapBaseGroups "ou=groups,dc=example,dc=com" &
			occ --quiet ldap:set-config s01 ldapUserFilterObjectclass "inetOrgPerson" &
			occ --quiet ldap:set-config s01 ldapUserFilter "(|(objectclass=inetOrgPerson))" &
			occ --quiet ldap:set-config s01 ldapUserDisplayName "displayName" &
			occ --quiet ldap:set-config s01 ldapExpertUsernameAttr "sn" &
			occ --quiet ldap:set-config s01 ldapLoginFilter "(&(|(objectclass=inetOrgPerson))(|(sn=%uid)(mail=%uid)))" &
			occ --quiet ldap:set-config s01 ldapConfigurationActive 1 &
			occ --quiet ldap:set-config s01 ldapLoginFilterMode 1 &
			occ --quiet ldap:set-config s01 ldapEmailAttribute mail &
			wait
			occ ldap:test-config s01
		fi
	}
	{
		if [ "${enableSaml:-false}" == "true" ]
		then
			echo -e " \033[1m- Setting up SAML.\033[0m"
			start_service docker
			docker kill "saml_$instance" || true
			docker pull --quiet "unicon/simplesamlphp"

			index=${instance/server/}
			docker run \
				--detach \
				--name "saml_$instance" \
				--rm \
				-p "8${index}80":"80" \
				-p "8${index}43":"443" \
				--add-host host.docker.internal:host-gateway \
				--add-host ldap:host-gateway \
				--add-host "$instanceDomain":host-gateway \
				--env "VIRTUAL_HOST=localhost" \
				--env "VIRTUAL_HOST=localhost" \
				--volume "${workspace}/saml_config/config":/var/simplesamlphp/config \
				--volume "${workspace}/saml_config/cert":/var/simplesamlphp/cert \
				--volume "${workspace}/saml_config/metadata":/var/simplesamlphp/metadata \
				unicon/simplesamlphp

			occ --quiet app:enable user_saml
			occ --quiet saml:config:create

			# occ saml:config:set \
			# 	--general-idp0_display_name "SimpleSamlPhp" \
			# 	--general-uid_mapping "username" \
			# 	--idp-entityId "http://keycloak.dev.local/realms/Example" \
			# 	--idp-singleLogoutService.url "http://keycloak.dev.local/realms/Example/protocol/saml" \
			# 	--idp-singleSignOnService.url "http://keycloak.dev.local/realms/Example/protocol/saml" \
			# 	--idp-x509cert="$(cat keycloak.crt)" \
			# 	--security-authnRequestsSigned 1 \
			# 	--security-logoutRequestSigned 1 \
			# 	--security-logoutResponseSigned 1 \
			# 	--security-wantAssertionsEncrypted 0 \
			# 	--security-wantAssertionsSigned 1 \
			# 	--security-wantMessagesSigned 1 \
			# 	--security-nameIdEncrypted 0 --security-wantNameId 0 \
			# 	--security-wantNameIdEncrypted 0 \
			# 	--sp-x509cert="$(cat public.cert)" \
			# 	--sp-privateKey="$(cat private.key)" \
			# 	"1"

			occ config:app:set user_saml type --value "saml"
			occ saml:config:set \
				--general-idp0_display_name="Simple SAML PHP" \
				--general-uid_mapping="urn:oid:0.9.2342.19200300.100.1.1" \
				--idp-entityId="http://localhost:8${index}80/simplesaml/saml2/idp/metadata.php" \
				--idp-singleSignOnService.url="http://localhost:8${index}80/simplesaml/saml2/idp/SSOService.php" \
				--idp-singleLogoutService.url="http://localhost:8${index}80/simplesaml/saml2/idp/SingleLogoutService.php" \
				--idp-x509cert="$(cat ${workspace}/saml_config/cert/example.org.crt)" \
				"1"

			# --sp-privateKey="$(cat ${workspace}/saml_config/cert/example.org.pem)" \
			# occ saml:config:set --security-authnRequestsSigned="1"
			# occ saml:config:set --security-wantAssertionsEncrypted="1"
			# occ saml:config:set --security-wantAssertionsSigned="1"
		fi
	}
	{
		if [ "${enableEncryption:-false}" == "true" ]
		then
			echo -e " \033[1m- Setting up encryption.\033[0m"
			occ --quiet app:enable encryption
			occ --quiet encryption:enable
		fi
	}
	{
		if [[ "${test:-false}" == "false" ]]
		then
			echo -e " \033[1m- Setting up password policy.\033[0m"
			occ --quiet config:app:set password_policy minLength --value 5 &
			occ --quiet config:app:set password_policy enforceHaveIBeenPwned --value 0 &
			occ --quiet config:app:set password_policy enforceNonCommonPassword --value 0 &
			wait

			echo -e " \033[1m- Creating dummy users Alice, Bob and Charlie.\033[0m"
			export OC_PASS=password
			occ --quiet user:add \
				--no-interaction \
				--ansi \
				--password-from-env \
				--display-name=Alice \
				alice &
			occ --quiet user:add \
				--no-interaction \
				--ansi \
				--password-from-env \
				--display-name=Bob \
				bob &
			occ --quiet user:add \
				--no-interaction \
				--ansi \
				--password-from-env \
				--display-name=Charlie \
				charlie &
				wait
		fi
	}
	wait
}

git -C "$instancePath" checkout --quiet .htaccess
git -C "$instancePath" checkout --quiet lib/composer

echo -e " \033[1m- Instance is available here:\033[0m"
echo "	https://$instanceDomain"

echo -e " \033[1m- Running cron job\033[0m"
php ./cron.php &
occ --quiet db:add-missing-indices &
